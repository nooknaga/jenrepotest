<?xml version='1.0' encoding='UTF-8'?>
<com.cloudbees.plugins.flow.FlowRun plugin="build-flow-plugin@0.19">
  <actions>
    <hudson.model.ParametersAction>
      <safeParameters class="sorted-set"/>
      <parameters>
        <hudson.model.StringParameterValue>
          <name>SitePair</name>
          <description></description>
          <value>SAC-HRS</value>
        </hudson.model.StringParameterValue>
        <hudson.model.StringParameterValue>
          <name>SFDCInformation</name>
          <description></description>
          <value></value>
        </hudson.model.StringParameterValue>
        <hudson.model.StringParameterValue>
          <name>SiteNames</name>
          <description></description>
          <value></value>
        </hudson.model.StringParameterValue>
        <hudson.model.StringParameterValue>
          <name>FIRMID</name>
          <description>Example : 930585</description>
          <value>930585</value>
        </hudson.model.StringParameterValue>
        <hudson.model.StringParameterValue>
          <name>ENVIRONMENT</name>
          <description>Prod/Dev</description>
          <value>Prod</value>
        </hudson.model.StringParameterValue>
      </parameters>
      <parameterDefinitionNames class="hudson.model.ParametersDefinitionProperty$1">
        <outer-class>
          <parameterDefinitions>
            <org.biouno.unochoice.ChoiceParameter plugin="uno-choice@1.4">
              <name>SitePair</name>
              <description></description>
              <randomName>choice-parameter-2588417649322433</randomName>
              <visibleItemCount>3</visibleItemCount>
              <script class="org.biouno.unochoice.model.GroovyScript">
                <script>import groovy.sql.Sql

List nameslist = new ArrayList()

def sql = Sql.newInstance(&quot;jdbc:mysql://localhost:3306/siteinformation&quot;, &quot;root&quot;, &quot;Advent2016!&quot;, &quot;com.mysql.jdbc.Driver&quot;)
sql.eachRow (&quot;select distinct SitePairName from sitepair&quot;)
{
nameslist &lt;&lt; it.SitePairName
}
return nameslist</script>
                <fallbackScript>return[&apos;Script Error&apos;]</fallbackScript>
              </script>
              <projectName>Citrix_Geneva_Orchestration</projectName>
              <choiceType>PT_SINGLE_SELECT</choiceType>
              <filterable>false</filterable>
            </org.biouno.unochoice.ChoiceParameter>
            <org.biouno.unochoice.DynamicReferenceParameter plugin="uno-choice@1.4">
              <name>SFDCInformation</name>
              <description></description>
              <randomName>choice-parameter-2588417655958374</randomName>
              <visibleItemCount>8</visibleItemCount>
              <script class="org.biouno.unochoice.model.GroovyScript">
                <script>import groovy.sql.Sql

List storefront1 = new ArrayList()
List storefront2 = new ArrayList()

def (site1, site2) = &quot;${SitePair}&quot;.tokenize(&apos;-&apos;)
def sql = Sql.newInstance(&quot;jdbc:mysql://localhost:3306/siteinformation&quot;, &quot;root&quot;, &quot;Advent2016!&quot;, &quot;com.mysql.jdbc.Driver&quot;)
def query1 = &quot;select IPAddress, SiteName, HostName from sfdcinformation where ComponentType like &apos;DC%&apos; and (SiteName like &quot;+&quot;&apos;${site1}&apos;&quot;+&quot; or SiteName like &quot;+&quot;&apos;${site2}&apos;&quot;+&quot;);&quot;

sql.eachRow (query1)
{
storefront1 &lt;&lt; it.IPAddress+&quot;  &quot;+it.SiteName+&quot;  &quot;+it.HostName

}

def query2 = &quot;select IPAddress, SiteName, HostName from sfdcinformation where ComponentType like &apos;SF%&apos; and (SiteName like &quot;+&quot;&apos;${site1}&apos;&quot;+&quot; or SiteName like &quot;+&quot;&apos;${site2}&apos;&quot;+&quot;);&quot;
sql.eachRow (query2)
{
storefront2 &lt;&lt; it.IPAddress+&quot;  &quot;+it.SiteName+&quot;  &quot;+it.HostName
}
storefront1.addAll(storefront2)

return storefront1</script>
                <fallbackScript>return[&apos;Script Error&apos;]</fallbackScript>
              </script>
              <projectName>Citrix_Geneva_Orchestration</projectName>
              <parameters class="linked-hash-map">
                <entry>
                  <string>jenkinsProject</string>
                  <com.cloudbees.plugins.flow.BuildFlow plugin="build-flow-plugin@0.19">
                    <actions/>
                    <description></description>
                    <keepDependencies>false</keepDependencies>
                    <properties>
                      <hudson.model.ParametersDefinitionProperty reference="../../../../../../.."/>
                      <org.jenkinsci.plugins.envinject.EnvInjectJobProperty plugin="envinject@1.92.1">
                        <info>
                          <propertiesFilePath>/tmp/env2.properties</propertiesFilePath>
                          <groovyScriptContent>import hudson.model.*
import groovy.sql.Sql

//Accessing the site pair active choice parameter
def sitelist = build.buildVariableResolver.resolve(&quot;SitePair&quot;)
def FirmID = build.buildVariableResolver.resolve(&quot;FIRMID&quot;)
def Env = build.buildVariableResolver.resolve(&quot;ENVIRONMENT&quot;)
println &quot;$FirmID&quot;
println &quot;$Env&quot;

//Declaring lists to store different information for a site
List IPs = new ArrayList()
List sysname = new ArrayList()
List hatype = new ArrayList()
List component = new ArrayList()
List storefront = new ArrayList()

//splitting the site pair and getting the storefront and delivery controllers information for the site1 and feed to arrays
def (site1, site2) = &quot;${sitelist}&quot;.tokenize(&apos;-&apos;)
def sql = Sql.newInstance(&quot;jdbc:mysql://localhost:3306/siteinformation&quot;, &quot;root&quot;, &quot;Advent2016!&quot;, &quot;com.mysql.jdbc.Driver&quot;)
def query1 = &quot;select ComponentType, IPAddress, HostName, SiteName, HAType from sfdcinformation where SiteName like &quot;+&quot;&apos;${site1}&apos;&quot;+&quot;;&quot;

sql.eachRow (query1)
{
  component &lt;&lt; it.ComponentType
  IPs &lt;&lt; it.IPAddress
  sysname &lt;&lt; it.HostName
  hatype &lt;&lt; it.HAType
}

def size = component.size()

for (int j=0; j&lt;size; j++)
{
  println component[j]
  println IPs[j]
  println sysname[j]
  println hatype[j]  
}

//Defining variables to store the hostnames information for store fronts and delivery controllers of both sites
def Site1SFServer1
def Site1SFServer2
def Site2SFServer1
def Site2SFServer2
def Site1DCServer1
def Site1DCServer2
def Site2DCServer1
def Site2DCServer2
def site1citrix
def site2citrix

//Determine the primary and secondary store fronts and delivery controllers from site1
for (int i=0; i&lt;size; i++)
{
  if(hatype[i].equalsIgnoreCase(&quot;Primary&quot;))
  {
    if(component[i].equalsIgnoreCase(&quot;SF-01&quot;))
    {
      Site1SFServer1 = sysname[i]
    }
    else if(component[i].equalsIgnoreCase(&quot;DC-01&quot;))
    {
      Site1DCServer1 = sysname[i]
    }    
  }
  else if(hatype[i].equalsIgnoreCase(&quot;Secondary&quot;))
  {
     if(component[i].equalsIgnoreCase(&quot;SF-02&quot;))
    {
      Site1SFServer2 = sysname[i]
    }
    else if(component[i].equalsIgnoreCase(&quot;DC-02&quot;))
    {
      Site1DCServer2 = sysname[i]
    }    
  }
}

//Get the storefront and delivery controllers information for the site2 and feed to arrays
def query2 = &quot;select ComponentType, IPAddress, HostName, SiteName, HAType from sfdcinformation where SiteName like &quot;+&quot;&apos;${site2}&apos;&quot;+&quot;;&quot;
sql.eachRow (query2)
{
  component &lt;&lt; it.ComponentType
  IPs &lt;&lt; it.IPAddress
  sysname &lt;&lt; it.HostName
  hatype &lt;&lt; it.HAType
}

//Determine the primary and secondary store fronts and delivery controllers from site2
def size1 = component.size()

for (int j=size; j&lt;size1; j++)
{
  println component[j]
  println IPs[j]
  println sysname[j]
  println hatype[j]  
}
for (int i=size; i&lt;size1; i++)
{
  if(hatype[i].equalsIgnoreCase(&quot;Primary&quot;))
  {
    if(component[i].equalsIgnoreCase(&quot;SF-01&quot;))
    {
      Site2SFServer1 = sysname[i]
    }
    else if(component[i].equalsIgnoreCase(&quot;DC-01&quot;))
    {
      Site2DCServer1 = sysname[i]
    }    
  }
  else if(hatype[i].equalsIgnoreCase(&quot;Secondary&quot;))
  {
     if(component[i].equalsIgnoreCase(&quot;SF-02&quot;))
    {
      Site2SFServer2 = sysname[i]
    }
    else if(component[i].equalsIgnoreCase(&quot;DC-02&quot;))
    {
      Site2DCServer2 = sysname[i]
    }    
  }
}

def query3 = &quot;select Site1CitrixName, Site2CitrixName from sitepair where SitePairName = &quot;+&quot;&apos;${sitelist}&apos;&quot;+&quot;;&quot;
sql.eachRow (query3)
{
  site1citrix = it.Site1CitrixName
  site2citrix = it.Site2CitrixName
}

println &quot;creating env.properties file&quot;
//Creating and writing values to the environmental file created in the workspace folder of the job

def file1 = new File(&apos;/tmp/env2.properties&apos;)
file1.write(&quot;site1sf1 =  $Site1SFServer1\r\n&quot;)
file1.append(&quot;site1sf2 = $Site1SFServer2\r\n&quot;)
file1.append(&quot;site2sf1 = $Site2SFServer1\r\n&quot;)
file1.append(&quot;site2sf2 = $Site2SFServer2\r\n&quot;)
file1.append(&quot;site1dc1 = $Site1DCServer1\r\n&quot;)
file1.append(&quot;site1dc2 = $Site1DCServer2\r\n&quot;)
file1.append(&quot;site2dc1 = $Site2DCServer1\r\n&quot;)
file1.append(&quot;site2dc2 = $Site2DCServer2\r\n&quot;)
file1.append(&quot;Site1CitrixSiteName = $site1citrix\r\n&quot;)
file1.append(&quot;Site2CitrixSiteName = $site2citrix\r\n&quot;)


println &quot;created env.properties file&quot;</groovyScriptContent>
                          <loadFilesFromMaster>true</loadFilesFromMaster>
                        </info>
                        <on>true</on>
                        <keepJenkinsSystemVariables>true</keepJenkinsSystemVariables>
                        <keepBuildVariables>true</keepBuildVariables>
                        <overrideBuildParameters>false</overrideBuildParameters>
                        <contributors/>
                      </org.jenkinsci.plugins.envinject.EnvInjectJobProperty>
                    </properties>
                    <scm class="hudson.scm.NullSCM"/>
                    <canRoam>true</canRoam>
                    <disabled>false</disabled>
                    <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
                    <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
                    <triggers/>
                    <concurrentBuild>false</concurrentBuild>
                    <builders/>
                    <publishers/>
                    <buildWrappers/>
                    <icon/>
                    <dsl>build(&quot;ExecutePowerShellScript&quot;, param1:&quot;SitePair&quot;, param2:&quot;FIRMID&quot;, param3:&quot;site1sf2&quot; )</dsl>
                    <buildNeedsWorkspace>false</buildNeedsWorkspace>
                  </com.cloudbees.plugins.flow.BuildFlow>
                </entry>
                <entry>
                  <string>SitePair</string>
                  <string>SAC-HRS</string>
                </entry>
              </parameters>
              <referencedParameters>SitePair</referencedParameters>
              <choiceType>ET_UNORDERED_LIST</choiceType>
              <omitValueField>false</omitValueField>
            </org.biouno.unochoice.DynamicReferenceParameter>
            <org.biouno.unochoice.DynamicReferenceParameter plugin="uno-choice@1.4">
              <name>SiteNames</name>
              <description></description>
              <randomName>choice-parameter-2588417661558615</randomName>
              <visibleItemCount>2</visibleItemCount>
              <script class="org.biouno.unochoice.model.GroovyScript">
                <script>import groovy.sql.Sql


def sql = Sql.newInstance(&quot;jdbc:mysql://localhost:3306/siteinformation&quot;, &quot;root&quot;, &quot;Advent2016!&quot;, &quot;com.mysql.jdbc.Driver&quot;)
List storefront4 = new ArrayList()
def query3 = &quot;select Site1CitrixName, Site2CitrixName from sitepair where SitePairName = &quot;+&quot;&apos;${SitePair}&apos;&quot;+&quot;;&quot;
sql.eachRow (query3)
{
storefront4 &lt;&lt; it.Site1CitrixName
storefront4 &lt;&lt; it.Site2CitrixName
}
return storefront4</script>
                <fallbackScript>return[&apos;Script Error&apos;]</fallbackScript>
              </script>
              <projectName>Citrix_Geneva_Orchestration</projectName>
              <parameters class="linked-hash-map">
                <entry>
                  <string>jenkinsProject</string>
                  <com.cloudbees.plugins.flow.BuildFlow reference="../../../../org.biouno.unochoice.DynamicReferenceParameter/parameters/entry/com.cloudbees.plugins.flow.BuildFlow"/>
                </entry>
                <entry>
                  <string>SitePair</string>
                  <string>SAC-HRS</string>
                </entry>
              </parameters>
              <referencedParameters>SitePair</referencedParameters>
              <choiceType>ET_UNORDERED_LIST</choiceType>
              <omitValueField>false</omitValueField>
            </org.biouno.unochoice.DynamicReferenceParameter>
            <hudson.model.StringParameterDefinition>
              <name>FIRMID</name>
              <description>Example : 930585</description>
              <defaultValue></defaultValue>
            </hudson.model.StringParameterDefinition>
            <hudson.model.StringParameterDefinition>
              <name>ENVIRONMENT</name>
              <description>Prod/Dev</description>
              <defaultValue>Prod</defaultValue>
            </hudson.model.StringParameterDefinition>
          </parameterDefinitions>
        </outer-class>
      </parameterDefinitionNames>
    </hudson.model.ParametersAction>
    <hudson.model.CauseAction>
      <causeBag class="linked-hash-map">
        <entry>
          <hudson.model.Cause_-UserIdCause/>
          <int>1</int>
        </entry>
      </causeBag>
    </hudson.model.CauseAction>
    <org.jenkinsci.plugins.envinject.EnvInjectPluginAction plugin="envinject@1.92.1">
      <build class="com.cloudbees.plugins.flow.FlowRun" reference="../../.."/>
    </org.jenkinsci.plugins.envinject.EnvInjectPluginAction>
  </actions>
  <queueId>134</queueId>
  <timestamp>1469008081923</timestamp>
  <startTime>1469008081933</startTime>
  <result>SUCCESS</result>
  <duration>8150</duration>
  <charset>windows-1252</charset>
  <keepLog>false</keepLog>
  <dsl>build(&quot;ExecutePowerShellScript&quot;, param1:&quot;SitePair&quot;, param2:&quot;FIRMID&quot;, param3:&quot;site1sf2&quot; )</dsl>
  <buildNeedsWorkspace>false</buildNeedsWorkspace>
  <startJob>
    <name>Citrix_Geneva_Orchestration</name>
    <buildNumber>2</buildNumber>
    <lock class="java.util.concurrent.locks.ReentrantLock">
      <sync class="java.util.concurrent.locks.ReentrantLock$NonfairSync" serialization="custom">
        <java.util.concurrent.locks.AbstractQueuedSynchronizer>
          <default>
            <state>0</state>
          </default>
        </java.util.concurrent.locks.AbstractQueuedSynchronizer>
        <java.util.concurrent.locks.ReentrantLock_-Sync>
          <default/>
        </java.util.concurrent.locks.ReentrantLock_-Sync>
      </sync>
    </lock>
    <finalizedCond class="java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject">
      <outer-class class="java.util.concurrent.locks.ReentrantLock$NonfairSync" reference="../../lock/sync"/>
    </finalizedCond>
    <started>true</started>
    <completed>true</completed>
    <finalized>false</finalized>
    <uid>1</uid>
  </startJob>
  <jobsGraph class="org.jgrapht.graph.SimpleDirectedGraph">
    <allowingLoops>false</allowingLoops>
    <edgeFactory class="org.jgrapht.graph.ClassBasedEdgeFactory">
      <edgeClass>com.cloudbees.plugins.flow.FlowRun$JobEdge</edgeClass>
    </edgeFactory>
    <edgeSetFactory class="org.jgrapht.graph.AbstractBaseGraph$ArrayListFactory"/>
    <edgeMap class="linked-hash-map">
      <entry>
        <com.cloudbees.plugins.flow.FlowRun_-JobEdge>
          <source class="com.cloudbees.plugins.flow.JobInvocation$Start" reference="../../../../../startJob"/>
          <target>
            <name>ExecutePowerShellScript</name>
            <buildNumber>2</buildNumber>
            <lock class="java.util.concurrent.locks.ReentrantLock">
              <sync class="java.util.concurrent.locks.ReentrantLock$NonfairSync" serialization="custom">
                <java.util.concurrent.locks.AbstractQueuedSynchronizer>
                  <default>
                    <state>0</state>
                  </default>
                </java.util.concurrent.locks.AbstractQueuedSynchronizer>
                <java.util.concurrent.locks.ReentrantLock_-Sync>
                  <default/>
                </java.util.concurrent.locks.ReentrantLock_-Sync>
              </sync>
            </lock>
            <finalizedCond class="java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject">
              <outer-class class="java.util.concurrent.locks.ReentrantLock$NonfairSync" reference="../../lock/sync"/>
            </finalizedCond>
            <started>true</started>
            <completed>true</completed>
            <finalized>true</finalized>
            <uid>2</uid>
          </target>
        </com.cloudbees.plugins.flow.FlowRun_-JobEdge>
        <org.jgrapht.graph.IntrusiveEdge>
          <source class="com.cloudbees.plugins.flow.JobInvocation$Start" reference="../../../../../startJob"/>
          <target class="com.cloudbees.plugins.flow.JobInvocation" reference="../../com.cloudbees.plugins.flow.FlowRun_-JobEdge/target"/>
        </org.jgrapht.graph.IntrusiveEdge>
      </entry>
    </edgeMap>
    <specifics class="org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics">
      <outer-class class="org.jgrapht.graph.SimpleDirectedGraph" reference="../.."/>
      <vertexMapDirected class="linked-hash-map">
        <entry>
          <com.cloudbees.plugins.flow.JobInvocation_-Start reference="../../../../../startJob"/>
          <org.jgrapht.graph.AbstractBaseGraph_-DirectedEdgeContainer>
            <incoming class="org.jgrapht.util.ArrayUnenforcedSet" serialization="custom">
              <unserializable-parents/>
              <list>
                <default>
                  <size>0</size>
                </default>
                <int>0</int>
              </list>
            </incoming>
            <outgoing class="org.jgrapht.util.ArrayUnenforcedSet" serialization="custom">
              <unserializable-parents/>
              <list>
                <default>
                  <size>1</size>
                </default>
                <int>1</int>
                <com.cloudbees.plugins.flow.FlowRun_-JobEdge reference="../../../../../../../edgeMap/entry/com.cloudbees.plugins.flow.FlowRun_-JobEdge"/>
              </list>
            </outgoing>
          </org.jgrapht.graph.AbstractBaseGraph_-DirectedEdgeContainer>
        </entry>
        <entry>
          <com.cloudbees.plugins.flow.JobInvocation reference="../../../../edgeMap/entry/com.cloudbees.plugins.flow.FlowRun_-JobEdge/target"/>
          <org.jgrapht.graph.AbstractBaseGraph_-DirectedEdgeContainer>
            <incoming class="org.jgrapht.util.ArrayUnenforcedSet" serialization="custom">
              <unserializable-parents/>
              <list>
                <default>
                  <size>1</size>
                </default>
                <int>1</int>
                <com.cloudbees.plugins.flow.FlowRun_-JobEdge reference="../../../../../../../edgeMap/entry/com.cloudbees.plugins.flow.FlowRun_-JobEdge"/>
              </list>
            </incoming>
            <outgoing class="org.jgrapht.util.ArrayUnenforcedSet" serialization="custom">
              <unserializable-parents/>
              <list>
                <default>
                  <size>0</size>
                </default>
                <int>0</int>
              </list>
            </outgoing>
          </org.jgrapht.graph.AbstractBaseGraph_-DirectedEdgeContainer>
        </entry>
      </vertexMapDirected>
      <outer-class class="org.jgrapht.graph.SimpleDirectedGraph" defined-in="org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics" reference="../.."/>
    </specifics>
    <allowingMultipleEdges>false</allowingMultipleEdges>
  </jobsGraph>
</com.cloudbees.plugins.flow.FlowRun>